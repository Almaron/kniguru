{"ts":1368694835837,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"# The first thing you need to configure is which modules you need in your app.\n# The default is nothing which will include only core features (password encryption, login/logout).\n# Available submodules are: :user_activation, :http_basic_auth, :remember_me,\n# :reset_password, :session_timeout, :brute_force_protection, :activity_logging, :external\nRails.application.config.sorcery.submodules = [:user_activation, :remember_me, :external, :password_reset]\n\n# Here you can configure each submodule's features.\nRails.application.config.sorcery.configure do |config|\n  # -- core --\n  # What controller action to call for non-authenticated users. You can also\n  # override the 'not_authenticated' method of course.\n  # Default: `:not_authenticated`\n  #\n  # config.not_authenticated_action =\n\n\n  # When a non logged in user tries to enter a page that requires login, save\n  # the URL he wanted to reach, and send him there after login, using 'redirect_back_or_to'.\n  # Default: `true`\n  #\n  # config.save_return_to_url =\n\n\n  # Set domain option for cookies; Useful for remember_me submodule.\n  # Default: `nil`\n  #\n  # config.cookie_domain =\n\n  \n  # -- remember_me --\n  # allow the remember_me cookie to settable through AJAX\n  # Default: `true`\n  #\n  # user.remember_me_httponly =\n  \n  # How long in seconds the session length will be\n  # Default: `604800`\n  #\n  # user.remember_me_for =\n\n  # -- session timeout --\n  # How long in seconds to keep the session alive.\n  # Default: `3600`\n  #\n  # config.session_timeout =\n\n\n  # Use the last action as the beginning of session timeout.\n  # Default: `false`\n  #\n  # config.session_timeout_from_last_action =\n\n\n  # -- http_basic_auth --\n  # What realm to display for which controller name. For example {\"My App\" => \"Application\"}\n  # Default: `{\"application\" => \"Application\"}`\n  #\n  # config.controller_to_realm_map =\n\n\n  # -- activity logging --\n  # will register the time of last user login, every login.\n  # Default: `true`\n  #\n  # config.register_login_time =\n\n\n  # will register the time of last user logout, every logout.\n  # Default: `true`\n  #\n  # config.register_logout_time =\n\n\n  # will register the time of last user action, every action.\n  # Default: `true`\n  #\n  # config.register_last_activity_time =\n\n\n  # -- external --\n  # What providers are supported by this app, i.e. [:twitter, :facebook, :github, :google, :liveid] .\n  # Default: `[]`\n  #\n  # config.external_providers =\n\n\n  # You can change it by your local ca_file. i.e. '/etc/pki/tls/certs/ca-bundle.crt'\n  # Path to ca_file. By default use a internal ca-bundle.crt.\n  # Default: `'path/to/ca_file'`\n  #\n  # config.ca_file =\n\n\n  # For information about LinkedIn API:\n  # - user info fields go to https://developer.linkedin.com/documents/profile-fields\n  # - access permissions go to https://developer.linkedin.com/documents/authentication#granting\n  #\n  # config.linkedin.key = \"\"\n  # config.linkedin.secret = \"\"\n  # config.linkedin.callback_url = \"http://0.0.0.0:3000/oauth/callback?provider=linkedin\"\n  # config.linkedin.user_info_fields = ['first-name', 'last-name']\n  # config.linkedin.user_info_mapping = {first_name: \"firstName\", last_name: \"lastName\"}\n  # config.linkedin.access_permissions = ['r_basicprofile'] \n  #\n  # Twitter wil not accept any requests nor redirect uri containing localhost,\n  # make sure you use 0.0.0.0:3000 to access your app in development\n  #\n  # config.twitter.key = \"\"\n  # config.twitter.secret = \"\"\n  # config.twitter.callback_url = \"http://0.0.0.0:3000/oauth/callback?provider=twitter\"\n  # config.twitter.user_info_mapping = {:email => \"screen_name\"}\n  #\n  # config.facebook.key = \"\"\n  # config.facebook.secret = \"\"\n  # config.facebook.callback_url = \"http://0.0.0.0:3000/oauth/callback?provider=facebook\"\n  # config.facebook.user_info_mapping = {:email => \"name\"}\n  # config.facebook.access_permissions = [\"email\", \"publish_stream\"]\n  #\n  # config.github.key = \"\"\n  # config.github.secret = \"\"\n  # config.github.callback_url = \"http://0.0.0.0:3000/oauth/callback?provider=github\"\n  # config.github.user_info_mapping = {:email => \"name\"}\n  #\n  # config.google.key = \"\"\n  # config.google.secret = \"\"\n  # config.google.callback_url = \"http://0.0.0.0:3000/oauth/callback?provider=google\"\n  # config.google.user_info_mapping = {:email => \"email\", :username => \"name\"}\n  #\n  # config.vk.key = \"\"\n  # config.vk.secret = \"\"\n  # config.vk.callback_url = \"http://0.0.0.0:3000/oauth/callback?provider=vk\"\n  # config.vk.user_info_mapping = {:login => \"domain\", :name => \"full_name\"}\n  #\n  # To use liveid in development mode you have to replace mydomain.com with\n  # a valid domain even in development. To use a valid domain in development\n  # simply add your domain in your /etc/hosts file in front of 127.0.0.1\n  #\n  # config.liveid.key = \"\"\n  # config.liveid.secret = \"\"\n  # config.liveid.callback_url = \"http://mydomain.com:3000/oauth/callback?provider=liveid\"\n  # config.liveid.user_info_mapping = {:username => \"name\"}\n\n\n  # --- user config ---\n  config.user_config do |user|\n    # -- core --\n    # specify username attributes, for example: [:username, :email].\n    # Default: `[:username]`\n    #\n    # user.username_attribute_names =\n\n\n    # change *virtual* password attribute, the one which is used until an encrypted one is generated.\n    # Default: `:password`\n    #\n    # user.password_attribute_name =\n\n\n    # downcase the username before trying to authenticate, default is false\n    # Default: `false`\n    #\n    # user.downcase_username_before_authenticating =\n\n\n    # change default email attribute.\n    # Default: `:email`\n    #\n    # user.email_attribute_name =\n\n\n    # change default crypted_password attribute.\n    # Default: `:crypted_password`\n    #\n    # user.crypted_password_attribute_name =\n\n\n    # what pattern to use to join the password with the salt\n    # Default: `\"\"`\n    #\n    # user.salt_join_token =\n\n\n    # change default salt attribute.\n    # Default: `:salt`\n    #\n    # user.salt_attribute_name =\n\n\n    # how many times to apply encryption to the password.\n    # Default: `nil`\n    #\n    # user.stretches =\n\n\n    # encryption key used to encrypt reversible encryptions such as AES256.\n    # WARNING: If used for users' passwords, changing this key will leave passwords undecryptable!\n    # Default: `nil`\n    #\n    # user.encryption_key =\n\n\n    # use an external encryption class.\n    # Default: `nil`\n    #\n    # user.custom_encryption_provider =\n\n\n    # encryption algorithm name. See 'encryption_algorithm=' for available options.\n    # Default: `:bcrypt`\n    #\n    # user.encryption_algorithm =\n\n\n    # make this configuration inheritable for subclasses. Useful for ActiveRecord's STI.\n    # Default: `false`\n    #\n    # user.subclasses_inherit_config =\n\n\n    # -- user_activation --\n    # the attribute name to hold activation state (active/pending).\n    # Default: `:activation_state`\n    #\n    # user.activation_state_attribute_name =\n\n\n    # the attribute name to hold activation code (sent by email).\n    # Default: `:activation_token`\n    #\n    # user.activation_token_attribute_name =\n\n\n    # the attribute name to hold activation code expiration date.\n    # Default: `:activation_token_expires_at`\n    #\n    # user.activation_token_expires_at_attribute_name =\n\n\n    # how many seconds before the activation code expires. nil for never expires.\n    # Default: `nil`\n    #\n    # user.activation_token_expiration_period =\n\n\n    # your mailer class. Required.\n    # Default: `nil`\n    #\n    # user.user_activation_mailer =\n\n\n    # when true sorcery will not automatically\n    # email activation details and allow you to\n    # manually handle how and when email is sent.\n    # Default: `false`\n    #\n    # user.activation_mailer_disabled =\n\n\n    # activation needed email method on your mailer class.\n    # Default: `:activation_needed_email`\n    #\n    # user.activation_needed_email_method_name =\n\n\n    # activation success email method on your mailer class.\n    # Default: `:activation_success_email`\n    #\n    # user.activation_success_email_method_name =\n\n\n    # do you want to prevent or allow users that did not activate by email to login?\n    # Default: `true`\n    #\n    # user.prevent_non_active_users_to_login =\n\n\n    # -- reset_password --\n    # reset password code attribute name.\n    # Default: `:reset_password_token`\n    #\n    # user.reset_password_token_attribute_name =\n\n\n    # expires at attribute name.\n    # Default: `:reset_password_token_expires_at`\n    #\n    # user.reset_password_token_expires_at_attribute_name =\n\n\n    # when was email sent, used for hammering protection.\n    # Default: `:reset_password_email_sent_at`\n    #\n    # user.reset_password_email_sent_at_attribute_name =\n\n\n    # mailer class. Needed.\n    # Default: `nil`\n    #\n    # user.reset_password_mailer =\n\n\n    # reset password email method on your mailer class.\n    # Default: `:reset_password_email`\n    #\n    # user.reset_password_email_method_name =\n\n\n    # when true sorcery will not automatically\n    # email password reset details and allow you to\n    # manually handle how and when email is sent\n    # Default: `false`\n    #\n    # user.reset_password_mailer_disabled =\n\n\n    # how many seconds before the reset request expires. nil for never expires.\n    # Default: `nil`\n    #\n    # user.reset_password_expiration_period =\n\n\n    # hammering protection, how long to wait before allowing another email to be sent.\n    # Default: `5 * 60`\n    #\n    # user.reset_password_time_between_emails =\n\n\n    # -- brute_force_protection --\n    # Failed logins attribute name.\n    # Default: `:failed_logins_count`\n    #\n    # user.failed_logins_count_attribute_name =\n\n\n    # This field indicates whether user is banned and when it will be active again.\n    # Default: `:lock_expires_at`\n    #\n    # user.lock_expires_at_attribute_name =\n\n\n    # How many failed logins allowed.\n    # Default: `50`\n    #\n    # user.consecutive_login_retries_amount_limit =\n\n\n    # How long the user should be banned. in seconds. 0 for permanent.\n    # Default: `60 * 60`\n    #\n    # user.login_lock_time_period =\n\n    # Unlock token attribute name\n    # Default: `:unlock_token`\n    #\n    # user.unlock_token_attribute_name =\n\n    # Unlock token mailer method\n    # Default: `:send_unlock_token_email`\n    #\n    # user.unlock_token_email_method_name =\n\n    # when true sorcery will not automatically\n    # send email with unlock token\n    # Default: `false`\n    #\n    # user.unlock_token_mailer_disabled = true\n\n    # Unlock token mailer class\n    # Default: `nil`\n    #\n    # user.unlock_token_mailer = UserMailer\n\n    # -- activity logging --\n    # Last login attribute name.\n    # Default: `:last_login_at`\n    #\n    # user.last_login_at_attribute_name =\n\n\n    # Last logout attribute name.\n    # Default: `:last_logout_at`\n    #\n    # user.last_logout_at_attribute_name =\n\n\n    # Last activity attribute name.\n    # Default: `:last_activity_at`\n    #\n    # user.last_activity_at_attribute_name =\n\n\n    # How long since last activity is he user defined logged out?\n    # Default: `10 * 60`\n    #\n    # user.activity_timeout =\n\n\n    # -- external --\n    # Class which holds the various external provider data for this user.\n    # Default: `nil`\n    #\n    # user.authentications_class =\n\n\n    # User's identifier in authentications class.\n    # Default: `:user_id`\n    #\n    # user.authentications_user_id_attribute_name =\n\n\n    # Provider's identifier in authentications class.\n    # Default: `:provider`\n    #\n    # user.provider_attribute_name =\n\n\n    # User's external unique identifier in authentications class.\n    # Default: `:uid`\n    #\n    # user.provider_uid_attribute_name =\n  end\n\n  # This line must come after the 'user config' block.\n  # Define which model authenticates with sorcery.\n  config.user_class = \"User\"\nend\n"]],"start1":0,"start2":0,"length1":0,"length2":11791}]],"length":11791}
{"contributors":[],"silentsave":true,"ts":1368694833578,"patch":[[{"diffs":[[0,"ernal, :"],[-1,"password_"],[0,"reset]\n\n"]],"start1":431,"start2":431,"length1":25,"length2":16}]],"length":11782,"saved":false}
{"ts":1368694835185,"patch":[[{"diffs":[[0,", :reset"],[1,"_passwo"],[0,"]\n\n# Her"]],"start1":436,"start2":436,"length1":16,"length2":23}]],"length":11789,"saved":false}
{"ts":1368694836315,"patch":[[{"diffs":[[0,"t_passwo"],[1,"rd"],[0,"]\n\n# Her"]],"start1":443,"start2":443,"length1":16,"length2":18}]],"length":11791,"saved":false}
{"ts":1368696087840,"patch":[[{"diffs":[[0," `nil`\n    #\n   "],[-1," #"],[0," user.authentica"]],"start1":11198,"start2":11198,"length1":34,"length2":32},{"diffs":[[0,"_class ="],[1," "],[0,"\n\n\n    #"]],"start1":11235,"start2":11235,"length1":16,"length2":17}]],"length":11790,"saved":false}
{"ts":1368696089065,"patch":[[{"diffs":[[0,"class = "],[1,"A"],[0,"\n\n\n    #"]],"start1":11236,"start2":11236,"length1":16,"length2":17}]],"length":11791,"saved":false}
{"ts":1368696090682,"patch":[[{"diffs":[[0,"lass = A"],[1,"uth"],[0,"\n\n\n    #"]],"start1":11237,"start2":11237,"length1":16,"length2":19}]],"length":11794,"saved":false}
{"ts":1368696093553,"patch":[[{"diffs":[[0,"s = Auth"],[1,"enti"],[0,"\n\n\n    #"]],"start1":11240,"start2":11240,"length1":16,"length2":20}]],"length":11798,"saved":false}
{"ts":1368696095452,"patch":[[{"diffs":[[0,"Authenti"],[1,"cations"],[0,"\n\n\n    #"]],"start1":11244,"start2":11244,"length1":16,"length2":23}]],"length":11805,"saved":false}
{"ts":1368696105317,"patch":[[{"diffs":[[0,"tication"],[-1,"s"],[0,"\n\n\n    #"]],"start1":11250,"start2":11250,"length1":17,"length2":16}]],"length":11804,"saved":false}
{"ts":1368697389260,"patch":[[{"diffs":[[0,"ivation_mailer ="],[1," "],[0,"\n\n\n    # when tr"]],"start1":7492,"start2":7492,"length1":32,"length2":33}]],"length":11805,"saved":false}
{"ts":1368697391291,"patch":[[{"diffs":[[0," `nil`\n    #\n   "],[-1," #"],[0," user.user_activ"]],"start1":7460,"start2":7460,"length1":34,"length2":32}]],"length":11803,"saved":false}
{"ts":1368697393283,"patch":[[{"diffs":[[0,"ailer = "],[1,"User"],[0,"\n\n\n    #"]],"start1":7499,"start2":7499,"length1":16,"length2":20}]],"length":11807,"saved":false}
{"ts":1368697395563,"patch":[[{"diffs":[[0,"r = User"],[1,"Mailer"],[0,"\n\n\n    #"]],"start1":7503,"start2":7503,"length1":16,"length2":22}]],"length":11813,"saved":false}
{"ts":1368697434811,"patch":[[{"diffs":[[0," `nil`\n    #\n   "],[-1," #"],[0," user.reset_pass"]],"start1":8745,"start2":8745,"length1":34,"length2":32},{"diffs":[[0,"ord_mailer ="],[1," Us"],[0,"\n\n\n    # res"]],"start1":8778,"start2":8778,"length1":24,"length2":27}]],"length":11814,"saved":false}
{"ts":1368697436069,"patch":[[{"diffs":[[0,"ler = Us"],[1,"er"],[0,"\n\n\n    #"]],"start1":8785,"start2":8785,"length1":16,"length2":18}]],"length":11816,"saved":false}
{"ts":1368697437395,"patch":[[{"diffs":[[0,"r = User"],[1,"Mailer"],[0,"\n\n\n    #"]],"start1":8787,"start2":8787,"length1":16,"length2":22}]],"length":11822,"saved":false}
